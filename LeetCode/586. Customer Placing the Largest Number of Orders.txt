# Write your MySQL query statement below
SELECT customer_number
FROM Orders
GROUP BY customer_number
ORDER BY COUNT(order_number) DESC
LIMIT 1;





Follow up: 
    What if more than one customer has the largest number of orders, can you find all the customer_number in this case?

# cte means Commen Table Expression
# This expression return a new tem Table.

# My QUERY i called this table cte
# cte table return Customer number and Total order number for every customer.

# cte2 table depend on cte table
# cte2 return Maximum order number from cte table.

# Then finally return Those customer number, their Total order number Equal to the Maximum order number. 



# Write your MySQL query statement below
WITH cte AS
(
  SELECT customer_number, COUNT(*) AS c
  FROM Orders
  GROUP BY customer_number
),
cte2 AS
(
  SELECT MAX(c) AS m
  FROM cte
)
SELECT customer_number
FROM cte
WHERE c = (SELECT m FROM cte2);


#---------------------------------------------------------------------------------------------------- Pandas Soluation ----------------------------------------------------------------------------
import pandas as pd
def largest_orders(orders: pd.DataFrame) -> pd.DataFrame:
    return orders['customer_number'].mode().to_frame()

# .mode(): This method is applied to the Series. The mode() function returns the most frequently occurring value(s) in the Series. If there are multiple values with the highest frequency, it will return all of them.
# .to_frame(): This method converts the Series (or the result of mode(), which is also a Series) into a DataFrame. The resulting DataFrame will have a single column with the most frequent value(s) from the original Series.

